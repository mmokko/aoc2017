INPUT='95148459654114155731698478149499917967976774762713244751317162642456177966287315776144295221229668557345' \
      '23112634451632334931992113878384615946356666994229829477826233173336839784381232613268639597197771792285' \
      '99319321138948466562743761584836184512984131635354116264899181952748224523953976485816295227945792555726' \
      '12191334495945445882948547117441577527886532414273333978987892959627599834177887388958581991645747477325' \
      '22491793665999514541826572255762778346692229823668846885657546912737459594686489574985113262159343539639' \
      '81471593984617554514519623785326888374742147318993423214834751785956958395133486656388454552769722562524' \
      '41571591386994632555139663859339872993852642499434826793515355585155228722331338358366991294136434469472' \
      '54782582974989695176328811873941415934798185361945979765192542159322576537774552274776179578332734632165' \
      '93642394215275314734914719726618923177918342664351954252667253233858814365351722938716621544226598956257' \
      '75321224885925835136317478274233696142532538156157599235241551416878281617386114885947828533952915163142' \
      '95368192864987218123238617716385743444168794762559299291579129841517426132687547796853961259545953181349' \
      '33366626594498249956388771723777242772654678448815844555372892574747735672368299826548254744359377667294' \
      '76455933465952323314658756826111625315518939418869683169128471126487291434896188825338697199443135247471' \
      '73768787459487691712432426212199123787317555443872494439973823997147383518577523293679976651669564675444' \
      '59817582915478514486541453932175598413554259672117364863112592515988922747164842668361925135551248923449' \
      '96832838588987751215695272519869174695143144349749645576151648657347618532174852364428349418111939987432' \
      '46839223935476828519314359312762677667727982615631179546485764217413848234941878952725825756696852799869' \
      '88357796138794326125852772995446355723211161523161886222562853546488411563473998633847953246787557146187' \
      '69694783133572288891817296125649897186894623729952347484198352739148996235719643392725179876436249396589' \
      '49955926832966518747873842473266438867749668286573937176265915783211748322224341288178717653472781527994' \
      '25565633521152643686221411129463425496425385516719682884157452772141585743166647191938727971366274357874' \
      '252166721759'


def adjacent_find(input_str):
    total = 0
    for idx, val in enumerate(input_str):
        next_idx = idx + 1
        next_val = input_str[next_idx] if next_idx < len(input_str) else input_str[0]
        if val == next_val:
            total += int(val)
    return total


def circular_find(input_str):
    total = 0
    middle = int(len(input_str) / 2)
    for idx, val in enumerate(input_str):
        next_idx = idx + middle if idx < middle else idx + middle - len(input_str)
        next_val = input_str[next_idx]
        if val == next_val:
            total += int(val)
    return total


def main():
    print(adjacent_find(INPUT))
    print(circular_find(INPUT))


if __name__=='__main__':
    main()
